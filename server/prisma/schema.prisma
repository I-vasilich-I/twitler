// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  password       String
  username       String
  activationLink String
  isActivated    Boolean       @default(false)
  refreshToken   String?       @db.VarChar(300)
  avatar         String?
  bio            String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  tweets         Tweet[]
  retweets       Retweet[]
  tweetLikes     TweetLike[]
  bookmarks      Bookmark[]
  comments       Comment[]
  commentLikes   CommentLike[]
}

model Tweet {
  id         Int         @id @default(autoincrement())
  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  timestamp  DateTime    @default(now())
  text       String?     @db.VarChar(500)
  imageLink  String?
  isPublic   Boolean
  retweets   Retweet[]
  tweetLikes TweetLike[]
  bookmarks  Bookmark[]
  comments   Comment[]
}

model Retweet {
  id      Int   @id @default(autoincrement())
  User    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  Int
  Tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweetId Int
}

model TweetLike {
  id      Int   @id @default(autoincrement())
  User    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  Int
  Tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweetId Int
}

model Bookmark {
  id      Int   @id @default(autoincrement())
  User    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  Int
  Tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweetId Int
}

model Comment {
  id           Int           @id @default(autoincrement())
  User         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int
  Tweet        Tweet         @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweetId      Int
  timestamp    DateTime      @default(now())
  text         String?       @db.VarChar(500)
  imageLink    String?
  likesCount   Int           @default(0)
  commentLikes CommentLike[]
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId Int
}
